plugins {
    id 'java'
    id 'application'
}

group = 'com.care.audio'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.care.audio.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

application {
    mainClass = 'com.care.audio.Main'
    applicationDefaultJvmArgs = [
        "-Djava.library.path=${projectDir}/src/main/cpp/build/lib"
    ]
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

// Task to generate JNI headers
task generateJniHeaders(type: JavaCompile) {
    source = sourceSets.main.java.srcDirs
    classpath = sourceSets.main.compileClasspath
    destinationDirectory = file("${buildDir}/generated/jni")
    options.compilerArgs += ['-h', file("src/main/cpp/main_driver/jni")]
    
    // Only compile AudioProcessor.java for header generation
    include '**/AudioProcessor.java'
}

// Task to build native code
task buildNative(type: Exec) {
    workingDir 'src/main/cpp'
    commandLine 'bash', '-c', '''
        rm -rf build
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug ..
        make -j6
        mkdir -p lib
        ls -la lib/  # Debug: List contents of lib directory
    '''
    
    doLast {
        def soFile = new File("${workingDir}/build/lib/libcare_audio_processing.so")
        if (!soFile.exists()) {
            throw new GradleException("Native library not found at ${soFile.absolutePath}")
        }
        println "Native library exists at: ${soFile.absolutePath}"
    }
}

// Fix task dependencies
generateJniHeaders.dependsOn.clear()  // Clear existing dependencies
buildNative.dependsOn generateJniHeaders
compileJava.dependsOn buildNative

// Run task configuration
run {
    dependsOn buildNative
    
    environment "LD_LIBRARY_PATH", "${projectDir}/src/main/cpp/build/lib"
    
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    } else {
        args = ["src/test/resources/audio/nearend_mono.wav", 
                "src/test/resources/audio/farend.wav",
                "src/test/resources/audio/output.wav"]
    }
    
    doFirst {
        // Check if native library exists
        def libPath = "${projectDir}/src/main/cpp/build/lib/libcare_audio_processing.so"
        def libFile = new File(libPath)
        println "Checking native library at: ${libPath}"
        println "Library exists: ${libFile.exists()}"
        println "Library can read: ${libFile.canRead()}"
        println "LD_LIBRARY_PATH: ${System.getenv('LD_LIBRARY_PATH')}"
        
        if (!libFile.exists()) {
            throw new GradleException("Native library not found at ${libPath}")
        }
        
        // Check if input files exist
        args.take(2).each { String path ->
            def file = new File(path)
            if (!file.exists()) {
                throw new GradleException("Input file not found: ${file.absolutePath}")
            }
        }
    }
} 